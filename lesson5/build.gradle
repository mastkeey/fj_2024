plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'

    implementation project(':ripper-starter')

    implementation( 'org.mapstruct:mapstruct:1.5.5.Final')
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
    testImplementation 'org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-13'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.jeasy:easy-random-core:5.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test', Test) {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
    }
}

tasks.test {
    finalizedBy tasks.jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "ru/mastkey/fj_2024/lesson5/client/dto/*",
                        "ru/mastkey/fj_2024/lesson5/controller/dto/*",
                        "ru/mastkey/fj_2024/lesson5/entity/*",
                        "ru/mastkey/fj_2024/lesson5/exception/*",
                        "**/*MapperImpl.class"
                ])
            }))
        }
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "ru/mastkey/fj_2024/lesson5/client/dto/*",
                    "ru/mastkey/fj_2024/lesson5/controller/dto/*",
                    "ru/mastkey/fj_2024/lesson5/entity/*",
                    "ru/mastkey/fj_2024/lesson5/exception/*",
                    "**/*MapperImpl.class"
            ])
        }))
    }

}
